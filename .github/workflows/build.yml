name: CI Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '15 10 * * 1'  # Si quieres ejecutar este pipeline periódicamente

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]  # Matriz para usar diferentes versiones de Node.js
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present
      #- run: npm test || echo "No test files found, continuing without tests"

  eslint:
    name: Run ESLint Scan
    runs-on: ubuntu-latest
    needs: build  # Ejecuta este trabajo después de "build"
    permissions:
      contents: read
      security-events: write
      actions: read  # Permisos necesarios para usar el análisis SARIF
    steps:
      - uses: actions/checkout@v4
      - name: Install ESLint and SARIF Formatter
        run: |
          npm install eslint@latest
          npm install @microsoft/eslint-formatter-sarif@latest

      - name: Run ESLint
        env:
          SARIF_ESLINT_IGNORE_SUPPRESSED: "true"
        run: |
          npx eslint . --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
        continue-on-error: true

      - name: Check if SARIF file was created
        run: |
          if [ ! -f eslint-results.sarif ]; then 
            echo "Error: eslint-results.sarif not found!"
            exit 1
          fi

      - name: Upload ESLint SARIF results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: build  # Ejecuta este trabajo después de "build"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Evita clones superficiales para mejorar la relevancia del análisis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Para obtener información de PRs
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  slackNotification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [build, sonarcloud, eslint]  # Solo se ejecuta si build, sonarcloud y eslint completan sin errores
    if: success()
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: 'Código sin errores'